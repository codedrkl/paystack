{
    "docs": [
        {
            "location": "/", 
            "text": "Overview\n\n\nPaystack API bindings in Python.\n\n\n \n \n\n\nInstallation / Usage\n\n\nTo install use pip:\n\n\n$ pip install --upgrade paystack\n\n\n\nor\n\n\n$ easy_install --upgrade paystack\n\n\n\nSee \npip-installer\n for instructions\non installing pip. If you are on a system with easy_install but not\npip, you can use easy_install instead. If you're not using virtualenv,\nyou may have to prefix those commands with \nsudo\n. You can learn more\nabout virtualenv at \nhttp://www.virtualenv.org/\n\n\nTo install from source, clone this repo and run:\n\n\n$ git clone https://github.com/ojengwa/paystack.git\n\n$ python setup.py install\n\n\n\nDocumentation\n\n\nPlease see https://developers.paystack.co/docs for the most up-to-date documentation for the Paystack API.\n\n\nAPI Anatomy\n\n\nThe API resource are exposed via a single interface \npaystack.resource\n.\n\n\nClasses exposed via the interface includes:\n\n'BaseAPIResource', 'CustomerResource', 'PlanResource', 'RequestsClient', 'TransactionResource', '__builtins__',\n'__doc__', '__file__', '__name__', '__package__', 'error', 'util', 'version'\n\n\nDocumentation and signature for each of the methods defined in the API follows:\n\n\nTransactionResource\n:\n\n\n\"\"\"\nBase transaction resource Class.\n\nEncapsulate everything about a transaction instant.\n\nAttributes:\n    access_code (string): Paystack access_code for initiating payment\n    amount (int): Amount to pay in Kobo\n    authorization_code (string): Paystack verification authorization_code\n    authorization_url (string): Paystack verification authorization_url\n    email (string): Client's email address\n    reference (string): Unique transaction reference\n\"\"\"\n\n\ndef __init__(self, api_secret, reference=None,\n             resource_path='transaction', *args, **kwargs):\n    \"\"\"\n    Create a TransactionResource instance.\n\n    Args:\n        api_secret (string): Developer's API SECRET_KEY.\n        reference (string, optional): Unique transaction reference.\n        resource_path (str, optional): API resource_path. Do not change.\n        *args: Extra positional arguments.\n        **kwargs: Extra keyworded arguments.\n    \"\"\"\n\n\ndef initialize(self, amount, email,\n               plan=None, ref=None):\n    \"\"\"\n    Transaction resource initialisation method.\n\n    Args:\n        amount (int): Amount to pay in Kobo.\n        email (string): Client's email address.\n        plan (string, optional): You customer billing plan.\n        ref (string, optional): Unique transaction reference.\n\n    Raises:\n        error.APIError: Something generally bad happened... :()\n        error.ValidationError: Bad input.\n\n    Returns:\n        response (dict): Response data from Paystack\n    \"\"\"\n\n\ndef verify(self, ref=None):\n    \"\"\"\n    Verify transaction instance.\n\n    Args:\n        ref (string, optional): Unique transaction reference\n\n    Raises:\n        error.APIError: Something generally bad happened... :()\n        error.ValidationError: Bad input.\n\n    Returns:\n        response (dict): Dictionary containing payment verification details\n    \"\"\"\n\n\ndef charge(self, auth_code=None, amount=None,\n           email=None, reference=None):\n    \"\"\"\n    Bill a transaction to a customer's account.\n\n    Args:\n        auth_code (string, optional): Paystack verification authorization_code\n        amount (int, optional): Amount to pay in Kobo.\n        email (string, optional): Client's email address.\n        reference (string, optional): Unique transaction reference.\n\n    Raises:\n        error.APIError: Something generally bad happened... :()\n        error.ValidationError: Bad input.\n\n    Returns:\n        response (dict): Response data from Paystack\n    \"\"\"\n\n\ndef authorize(self, auth_url=None):\n    \"\"\"\n    Open a browser window for client to enter card details.\n\n    Args:\n        auth_url (string, optional): Paystack verification authorization_url\n\n    Raises:\n        e: Browser Error :(\n        error.ValidationError: Bad input.\n\n    Returns:\n        None\n    \"\"\"\n\n\n\nTesting\n\n\nThe package is compatible with Python 2.6+, Python 3.1+ and PyPy.  We need to test against all of these environments to ensure compatibility.  Travis CI will automatically run our tests on push.  For local testing, we use \nnose\n to handle testing across environments.\n\n\nTo run the included test using [fabric](http://fabfile.org:\n\n\n\n\n\n\nClone the repo:\n\n\n$ git clone https://github.com/ojengwa/paystack.git\n\n\n\n\n\n\nCD into project directory:\n\n\n$ cd paystack\n\n\n\n\n\n\nInstall dependencies:\n\n\n$ fab install\n\n\n\n\n\n\nRun the includded test:\n\n\n$ fab test\n\n\n\n\n\n\nTODO\n\n\n\n\nAdd Event hooks\n\n\nCreate Consumer Resource\n\n\nCreate Plan Resource\n\n\n\n\nExample\n\n\n\nfrom paystack.resource import TransactionResource\n\nimport random\nimport string\n\ndef main():\n    rand = ''.join(\n        [random.choice(\n            string.ascii_letters + string.digits) for n in range(16)])\n    secret_key = 'YOUR_SECRET_KEY'\n    random_ref = rand\n    test_email = 'TEST_EMAIL'\n    test_amount = 'TEST_AMOUNT'\n    plan = 'Basic'\n    client = TransactionResource(secret_key, random_ref)\n    response = c****lient.initialize(test_amount,\n                                 test_email,\n                                 plan)\n    print(response)\n    client.authorize() # Will open a browser window for client to enter card details\n    verify = client.verify() # Verify client credentials\n    print(verify)\n    print(client.charge()) # Charge an already exsiting client\n\n\n\n\n\nPlease see the \nproject license\n for further details.", 
            "title": "Home"
        }, 
        {
            "location": "/#overview", 
            "text": "Paystack API bindings in Python.", 
            "title": "Overview"
        }, 
        {
            "location": "/#installation-usage", 
            "text": "To install use pip:  $ pip install --upgrade paystack  or  $ easy_install --upgrade paystack  See  pip-installer  for instructions\non installing pip. If you are on a system with easy_install but not\npip, you can use easy_install instead. If you're not using virtualenv,\nyou may have to prefix those commands with  sudo . You can learn more\nabout virtualenv at  http://www.virtualenv.org/  To install from source, clone this repo and run:  $ git clone https://github.com/ojengwa/paystack.git\n\n$ python setup.py install", 
            "title": "Installation / Usage"
        }, 
        {
            "location": "/#documentation", 
            "text": "Please see https://developers.paystack.co/docs for the most up-to-date documentation for the Paystack API.", 
            "title": "Documentation"
        }, 
        {
            "location": "/#api-anatomy", 
            "text": "The API resource are exposed via a single interface  paystack.resource .  Classes exposed via the interface includes: 'BaseAPIResource', 'CustomerResource', 'PlanResource', 'RequestsClient', 'TransactionResource', '__builtins__',\n'__doc__', '__file__', '__name__', '__package__', 'error', 'util', 'version'  Documentation and signature for each of the methods defined in the API follows:  TransactionResource :  \"\"\"\nBase transaction resource Class.\n\nEncapsulate everything about a transaction instant.\n\nAttributes:\n    access_code (string): Paystack access_code for initiating payment\n    amount (int): Amount to pay in Kobo\n    authorization_code (string): Paystack verification authorization_code\n    authorization_url (string): Paystack verification authorization_url\n    email (string): Client's email address\n    reference (string): Unique transaction reference\n\"\"\"\n\n\ndef __init__(self, api_secret, reference=None,\n             resource_path='transaction', *args, **kwargs):\n    \"\"\"\n    Create a TransactionResource instance.\n\n    Args:\n        api_secret (string): Developer's API SECRET_KEY.\n        reference (string, optional): Unique transaction reference.\n        resource_path (str, optional): API resource_path. Do not change.\n        *args: Extra positional arguments.\n        **kwargs: Extra keyworded arguments.\n    \"\"\"\n\n\ndef initialize(self, amount, email,\n               plan=None, ref=None):\n    \"\"\"\n    Transaction resource initialisation method.\n\n    Args:\n        amount (int): Amount to pay in Kobo.\n        email (string): Client's email address.\n        plan (string, optional): You customer billing plan.\n        ref (string, optional): Unique transaction reference.\n\n    Raises:\n        error.APIError: Something generally bad happened... :()\n        error.ValidationError: Bad input.\n\n    Returns:\n        response (dict): Response data from Paystack\n    \"\"\"\n\n\ndef verify(self, ref=None):\n    \"\"\"\n    Verify transaction instance.\n\n    Args:\n        ref (string, optional): Unique transaction reference\n\n    Raises:\n        error.APIError: Something generally bad happened... :()\n        error.ValidationError: Bad input.\n\n    Returns:\n        response (dict): Dictionary containing payment verification details\n    \"\"\"\n\n\ndef charge(self, auth_code=None, amount=None,\n           email=None, reference=None):\n    \"\"\"\n    Bill a transaction to a customer's account.\n\n    Args:\n        auth_code (string, optional): Paystack verification authorization_code\n        amount (int, optional): Amount to pay in Kobo.\n        email (string, optional): Client's email address.\n        reference (string, optional): Unique transaction reference.\n\n    Raises:\n        error.APIError: Something generally bad happened... :()\n        error.ValidationError: Bad input.\n\n    Returns:\n        response (dict): Response data from Paystack\n    \"\"\"\n\n\ndef authorize(self, auth_url=None):\n    \"\"\"\n    Open a browser window for client to enter card details.\n\n    Args:\n        auth_url (string, optional): Paystack verification authorization_url\n\n    Raises:\n        e: Browser Error :(\n        error.ValidationError: Bad input.\n\n    Returns:\n        None\n    \"\"\"", 
            "title": "API Anatomy"
        }, 
        {
            "location": "/#testing", 
            "text": "The package is compatible with Python 2.6+, Python 3.1+ and PyPy.  We need to test against all of these environments to ensure compatibility.  Travis CI will automatically run our tests on push.  For local testing, we use  nose  to handle testing across environments.  To run the included test using [fabric](http://fabfile.org:    Clone the repo:  $ git clone https://github.com/ojengwa/paystack.git    CD into project directory:  $ cd paystack    Install dependencies:  $ fab install    Run the includded test:  $ fab test", 
            "title": "Testing"
        }, 
        {
            "location": "/#todo", 
            "text": "Add Event hooks  Create Consumer Resource  Create Plan Resource", 
            "title": "TODO"
        }, 
        {
            "location": "/#example", 
            "text": "from paystack.resource import TransactionResource\n\nimport random\nimport string\n\ndef main():\n    rand = ''.join(\n        [random.choice(\n            string.ascii_letters + string.digits) for n in range(16)])\n    secret_key = 'YOUR_SECRET_KEY'\n    random_ref = rand\n    test_email = 'TEST_EMAIL'\n    test_amount = 'TEST_AMOUNT'\n    plan = 'Basic'\n    client = TransactionResource(secret_key, random_ref)\n    response = c****lient.initialize(test_amount,\n                                 test_email,\n                                 plan)\n    print(response)\n    client.authorize() # Will open a browser window for client to enter card details\n    verify = client.verify() # Verify client credentials\n    print(verify)\n    print(client.charge()) # Charge an already exsiting client  Please see the  project license  for further details.", 
            "title": "Example"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2015, Bernard Ojengwa\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\n\n\n\n\nRedistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n\n\n\n\n\nRedistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\n\n\n\n\nNeither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\n\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }
    ]
}